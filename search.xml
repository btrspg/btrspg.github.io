<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hdf5格式到底是什么</title>
    <url>/2020/08/10/hdf5/</url>
    <content><![CDATA[<h2 id="hierarchical-data-format：hdf">Hierarchical Data Format：<strong>HDF</strong></h2>
<blockquote>
<p>设计用来存储和组织大量数据的一组文件格式（<strong>HDF4</strong>，<strong>HDF5</strong>）。它最初开发于美国<a href="https://zh.wikipedia.org/wiki/%E5%9B%BD%E5%AE%B6%E8%B6%85%E7%BA%A7%E7%94%B5%E8%84%91%E5%BA%94%E7%94%A8%E4%B8%AD%E5%BF%83">国家超级计算应用中心</a>，现在由非营利社团HDF Group支持，其任务是确保HDF5技术的持续开发和存储在HDF中数据的持续可访问性。伴随着这个目标，HDF库和相关工具可在自由的类BSD许可证下获得用于一般使用。HDF被很多商业和非商业软件平台所支持，包括<a href="https://zh.wikipedia.org/wiki/Java">Java</a>、<a href="https://zh.wikipedia.org/wiki/MATLAB">MATLAB</a>、<a href="https://zh.wikipedia.org/wiki/Scilab">Scilab</a>、<a href="https://zh.wikipedia.org/wiki/GNU_Octave">Octave</a>、<a href="https://zh.wikipedia.org/wiki/Mathematica">Mathematica</a>、<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E5%8B%95%E5%BC%8F%E6%95%B8%E6%93%9A%E8%AA%9E%E8%A8%80">IDL</a>、<a href="https://zh.wikipedia.org/wiki/Python">Python</a>, <a href="https://zh.wikipedia.org/wiki/R%E8%AF%AD%E8%A8%80">R</a>, <a href="https://zh.wikipedia.org/wiki/Fortran">Fortran</a>和<a href="https://zh.wikipedia.org/wiki/Julia_(%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80)">Julia</a>。可免费获得的HDF发行中包括了库，命令行实用程序，测试包源代码，Java接口，和基于Java的HDF查看器（HDFView）</p>
</blockquote>
<p>From <a href="https://zh.wikipedia.org/wiki/HDF">wikipedia</a></p>
<p>首先我们可以理解为<code>HDF5</code>是一种文件架构，他主要规定了命名为<code>.hdf5</code>（拓展名包括：<code>.hdf</code>, <code>.h4</code>, <code>.hdf4</code>, <code>.he2</code>, <code>.h5</code>, <code>.hdf5</code>, <code>.he5</code>）这种格式的文件应该遵许一个什么样的规则。就像如果一个文件如果是<code>SAM</code>格式，那他就应该包含11列，第一列是read name，第二列包含什么信息，第三列等等，而且这些列必须是以<code>tab</code>分割。这样其他人看到知道这个文件格式的时候，就知道自己需要的信息从哪里去提取。</p>
<p>所以想要搞明白<code>HDF5</code>就是要搞明白这种文件格式的具体结构。</p>
<h2 id="hdf5">HDF5</h2>
<p>因为目前最常用的就是<code>HDF5</code>，所以这里主要说明这种格式，<code>HDF4</code>忽略不谈。</p>
<p><code>HDF5</code>只包含两种主要的对象类型：</p>
<ul>
<li>数据集（datasets），它是同质类型的多维数组；From <a href="https://zh.wikipedia.org/wiki/HDF">wikipedia</a></li>
<li>群组（groups），它是持有数据集和其他群组的容器结构。From <a href="https://zh.wikipedia.org/wiki/HDF">wikipedia</a></li>
</ul>
<h3 id="群组-group">群组（group）</h3>
<p>群组（group）中可以包含0个或者多个<code>HDF5</code>对象，以及一些元数据（metadata），换句话说，就是group可以包含和自己一样是group类型的数据。</p>
<p><img src="https://img-blog.csdn.net/20170407184445429?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTXJoaXVzZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img" title="image from CSDN:https://blog.csdn.net/Mrhiuser/article/details/69603826"></p>
<p><a href="https://blog.csdn.net/Mrhiuser/article/details/69603826">image from CSDN:https://blog.csdn.net/Mrhiuser/article/details/69603826</a></p>
<h3 id="数据集-datasets">数据集（datasets）</h3>
<p>数据集（datasets）则包含一个多维数组及这个数组的元数据</p>
<p><img src="https://img-blog.csdn.net/20170407184542446?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTXJoaXVzZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img" title="image from CSDN: https://blog.csdn.net/Mrhiuser/article/details/69603826"></p>
<p><a href="https://blog.csdn.net/Mrhiuser/article/details/69603826">image from CSDN: https://blog.csdn.net/Mrhiuser/article/details/69603826</a></p>
<h2 id="应用">应用</h2>
<p>因为我最近是因为<code>nanopore</code>的项目才注意到这个文件格式，所以我会以<code>nanopore</code>的原始数据来作为一个例子来说明具体的操作，但是应该会留在之后来具体说明。至此，我们大概了解了这种格式是一个什么样的格式。</p>
]]></content>
      <categories>
        <category>一般知识</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>hdf5</tag>
      </tags>
  </entry>
  <entry>
    <title>Deep learning enables accurate clustering with batch effect removal in single-cell RNA-seq analysis</title>
    <url>/2020/08/07/Deep-learning-enables-accurate-clustering-with-batch-effect-removal-in-single-cell-RNA-seq-analysis/</url>
    <content><![CDATA[<p>[TOC]</p>
<p><img src="https://cdn.jsdelivr.net/gh/btrspg/images@master/uPic/image-20200807161752087.png" alt="image-20200807161752087"></p>
<p>单细胞测序的数据是越来越多，随之而来的一些困难也逐渐明显，对于大量非同批次的单细胞数据直接分析，可能分析的结果都是批次效应导致的偏差结果。而这篇文章所发布的软件，就是利用<code>deep learning</code>来解决这一难题，<code>DESC</code>通过逐步训练来逐步消除批次效应。作者展示了该方法在不同数据上均能展示良好的性能，下面就来一起看看。</p>
<h2 id="workflow">Workflow</h2>
<p><img src="https://cdn.jsdelivr.net/gh/btrspg/images@master/uPic/image-20200807165300532.png" alt="image-20200807165300532"></p>
<p>整个工作流程不算特别的复杂。</p>
<p><code>DESE</code>的clustering是基于<code>autoencoder</code>的bottleneck nodes来做的，根据这些（降维了的）bottleneck节点作为特征来聚类样本，调整参数，从而最终达到去除批次效应的目的。</p>
<h2 id="批次效应">批次效应</h2>
<p>被称为批次效应的影响因素其实很多，并不简简单单的就是我的实验批次（例如这批数据我分几个时间段做的，这不同的时间段就是不同批次）。如下面这批数据所描述的恒河猴视网膜数据一样，来自不同的恒河猴（<code>animal level</code>），来自不同的区域（<code>region level</code>），以及这两个的综合因素（<code>sample level</code>）都算是具有批次效应的因素。这些都会影响到我们后续的单细胞分析中。</p>
<h2 id="不同数据结果展示">不同数据结果展示</h2>
<h3 id="恒河猴视网膜数据">恒河猴视网膜数据</h3>
<p><img src="https://gitee.com/loganylchen/images_pool/raw/master/uPic/99jLNn.png" alt="99jddLNn"></p>
<p>图中b 表示按照动物的来源（共四只恒河猴）进行标注，可以看出通过<code>DESC</code>去除批次效应后，不同来源的细胞并没有独立出来，而是很好的混合到了一起。图中c 表示按照样本信息（样本+区域）进行标注，图中d 表示按照细胞来源区域进行标注（视网膜凹处，视网膜周围），可以看出来除了有两个聚类是包含大量视网膜外周细胞以外，其他聚类均为混合细胞。</p>
<p><code>DESC</code>还有一个很大的优势则是，他可以不同给定<code>batch</code>信息，就能够直接去除<code>batch effect</code>，如上图e中所展示，ARI是描述聚类正确性的指标（以后会专门介绍），不同的颜色表示以不同的批次信息为去除批次效应的参数。从上图可以看出，除了<code>DESC</code>及<code>scVI</code>，其他的算法均需要用户给定批次信息才能做到去除批次效应。而<code>scVI</code>即便可以不用提供批次信息就能直接去除批次效应，但是效果却并不好。从中可以看出，<code>DESC</code>是效果最好的，而且当批次的信息为sample的时候（也就是认为批次最多的时候），性能是最好的。（图中的ALL就表示不给出批次信息，盲去）</p>
<p><img src="https://cdn.jsdelivr.net/gh/btrspg/images@master/uPic/image-20200807171842514.png" alt="image-20200807171842514"></p>
<p>而用KL divergence（后面也会详细介绍）来判断新能差异，同样能看出，<code>DESC</code>在给定批次信息，不同批次信息及不给定批次信息的去批次效应的效果都是最好的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/btrspg/images@master/uPic/image-20200807172208195.png" alt="image-20200807172208195"></p>
<p>在此列出了其他算法在基于<code>region</code>的批次效应去除时的效果，可以看出其他算法有大量的clusters是只包含有一种区域来源细胞的，可见批次效应并没有很好的去除。</p>
<p>这时，作者比较了<code>DESC</code>和<code>scVI</code>这两个可以不提供批次信息的算法，上图中的顶部<code>DESC</code>的结果，底部是<code>scVI</code>结果，可以很明显的看出，即便没有给出批次信息，<code>DSCE</code>也能很好的将批次效应去除，而对于<code>scVI</code>，结果上就不那么令人满意了。</p>
<h3 id="不同protocols的胰岛数据">不同protocols的胰岛数据</h3>
<p>作者找了4个来自不同实验protocols的胰岛数据，来将其合并分析，去除他们之间的批次效应（不同实验方法）</p>
<ul>
<li>Fluidigm C1</li>
<li>SMART-seq2</li>
<li>CEL-seq</li>
<li>CEL-seq2</li>
</ul>
<p>结果如下：</p>
<p><img src="https://gitee.com/loganylchen/images_pool/raw/master/uPic/image-20200807173119511.png" alt="image-20200807173119511"></p>
<p>可以从上图看出，除了<code>DESC</code>,<code>Seurat3.0</code>,<code>CCA</code>以外，其他的算法并不能将它们之间的批次效应很好的去除，而且即便是<code>Seurat3.0</code>这样看上去还不错的算法，一些显著的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> 细胞和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>细胞分到了一块，说明结果只是差强人意。</p>
<p><img src="https://cdn.jsdelivr.net/gh/btrspg/images@master/uPic/image-20200807174311775.png" alt="image-20200807174311775"></p>
<p>我们可以从上图中发现，<code>DESC</code>是逐步将批次效应去除的。</p>
<h3 id="外界刺激的外周血细胞">外界刺激的外周血细胞</h3>
<p>这套数据的实验目的就需要好好解释一下。所有的算法在去除批次效应的时候都会害怕去除的太厉害，会不会将我们需要看到的生物学差异也给去除掉了。而在前面几套数据中，我们已经看到了<code>DESC</code>在去除批次效应上的卓越成效，那他会不会是牺牲了很多生物学差异的去除呢，如果是这样，那就得不偿失了。</p>
<p>所以作者找到另一套数据来说明这个问题，说明自己的算法仅仅是去除了批次效应，生物学差异仍旧很好的保留着。</p>
<p>作者直接找到了8个样本的外周血细胞，并且一部分作为control，另一部分使用interferon-beta进行刺激。这就相当于保证了批次信息一样，但是实验条件不同。</p>
<p><img src="https://gitee.com/loganylchen/images_pool/raw/master/uPic/image-20200807175051943.png" alt="image-20200807175051943"></p>
<p>这样的数据的结果如上图，除了两个clusters，其他的clusters中都是两类细胞均有，而通过上图中的b图发现，这两个clusters是<code>CD14+ monocytes</code>.</p>
<p>通过差异表达分析可以看出<code>CD14+ monocytes</code>细胞case与control的差异是其他类细胞的很多倍差异。而且之前的研究也表明了，这种细胞在收到刺激后，的确会发生很大的变化，所以将其划分为两个clusters也是没有问题的。</p>
<p><img src="https://gitee.com/loganylchen/images_pool/raw/master/uPic/image-20200807175341585.png" alt="image-20200807175341585"></p>
<p>可见<code>DESC</code>可以去除批次效应，而且并不会影响到本身的生物学差异。</p>
<h3 id="老鼠骨髓先祖细胞">老鼠骨髓先祖细胞</h3>
<p>单细胞数据还会经常用来做细胞分化的研究，作者使用一套老师的骨髓先祖细胞数据来证明自己的算法并不会影响这一类的分析。</p>
<p><img src="https://cdn.jsdelivr.net/gh/btrspg/images@master/uPic/image-20200807180005098.png" alt="image-20200807180005098"></p>
<p>这里需要注意的是上图中的a图，这个图的颜色是根据分类的得分来的，而我们可以发现，分化越厉害的细胞，分类得分越高，所以这个得分也是有生物学意义的。</p>
<h3 id="单核细胞">单核细胞</h3>
<p>这个就是主要针对于连续状态细胞进行聚类</p>
<p><img src="https://gitee.com/loganylchen/images_pool/raw/master/uPic/image-20200808201804291.png" alt="image-20200808201804291"></p>
<p>上图中表示三个批次的结果，发现只有<code>DESC</code>的结果对于三个批次的细胞时间序列是一致的，并不随着批次的变化而变化。因为上图中的所有数据都来自健康人的外周血，所以应该不会有显著变化，对于其他的结果则明显看出，不同批次的时间序列结果是有差异的。</p>
<h2 id="性能">性能</h2>
<p><img src="https://gitee.com/loganylchen/images_pool/raw/master/uPic/image-20200808202034422.png" alt="image-20200808202034422"></p>
<p>性能的结果就非常明显的提升，不仅在正确率上有显著的提升，内存消耗也减少了，还支持GPU。</p>
<h2 id="写在最后">写在最后</h2>
<p>里面还有一些细节并没有搞的特别清楚，还是需要继续研究，不过对于这个软件觉得可玩性还是挺高的。</p>
]]></content>
      <tags>
        <tag>bioinformatics</tag>
        <tag>single-cell RNA-seq</tag>
        <tag>batch effect</tag>
        <tag>deep learning</tag>
        <tag>literature</tag>
      </tags>
  </entry>
  <entry>
    <title>ExpressionSet</title>
    <url>/2020/03/01/ExpressionSet/</url>
    <content><![CDATA[<blockquote>
<p>有没有试过，之前完成的项目再次需要进一步处理的时候，发现之前存的数据完全想不起来包含的是什么内容，特别是涉及到临床信息，写了一个case/control，却完全没有注明，case是什么，control是什么。</p>
</blockquote>
<p>近段时间看到一些<strong>非常棒的R包</strong>（以后可能会分享），发现很多R包的数据输入格式是一个叫做<code>ExpressionSet</code>的我从来没有接触过的格式。为了使用那些<strong>非常棒的R包</strong>，不得不又去看了这个<code>ExpressionSet</code>的数据格式，没想到被我看到了一个_又老又非常棒的R包_。</p>
<a id="more"></a>
<p>以下是官方的介绍：</p>
<blockquote>
<p>The ExpressionSet class is designed to combine several diﬀerent sources of information into a single convenient structure. An ExpressionSet can be manipulated (e.g., subsetted, copied) conveniently, and is the input or output from many Bioconductor functions.</p>
</blockquote>
<p>也就是能够将多种信息整合到一个数据结构中，而且这种数据结构还非常方便进行各种操作。</p>
<p>到这里，它已经有二点点的吸引我了（之前的一点点就是我必须要用它），让我了解下它到底能干什么。原来它之前主要是针对于<code>microarray</code>的数据存储来设计的，它包含了多个成分，分别是<code>assayData</code>,<code>phenoData</code>,<code>featureData</code>,<code>annotation</code>和<code>experimentData</code>。其中最常用的就是<code>assayData</code>和<code>phenoData</code>，分别表示了<strong>表达矩阵</strong>和<strong>表型信息</strong>（也可以理解成样本的临床信息）。</p>
<p>下面我就来介绍一下，怎么将一般的数据转化为<code>ExpressionSet</code>以及转化成<code>ExpressionSet</code>之后能做什么。</p>
<h2 id="安装">安装</h2>
<p>因为<code>ExpressionSet</code>并不是R中自带，所以必须安装，在R3.5以上版本，只需要如下命令即可。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">require</span>(<span class="string">&quot;BiocManager&quot;</span>)) </span><br><span class="line">  install.packages(<span class="string">&quot;BiocManager&quot;</span>)</span><br><span class="line">BiocManager::install(<span class="string">&quot;Biobase&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="使用">使用</h2>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(Biobase)</span><br></pre></td></tr></table></figure>
<p>导入该R包，下面我用一个例子来具体说明。假设我们现在有一个表达矩阵数据，存在一个CSV格式的文件里，以及该表达矩阵中所涉及样本的临床信息，同样也存在一个CSV的文件中。</p>
<p>表达矩阵（demoExpression.csv）如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>sample1</th>
<th>sample2</th>
<th>sample3</th>
<th>sample4</th>
</tr>
</thead>
<tbody>
<tr>
<td>gen1</td>
<td>0.76952238</td>
<td>0.36663781</td>
<td>0.79340003</td>
<td>0.6260257</td>
</tr>
<tr>
<td>gen2</td>
<td>0.91780668</td>
<td>0.37357912</td>
<td>0.5480497</td>
<td>0.0542586</td>
</tr>
<tr>
<td>gen3</td>
<td>0.1108848</td>
<td>0.28149705</td>
<td>0.46075876</td>
<td>0.47926737</td>
</tr>
<tr>
<td>gen4</td>
<td>0.179007</td>
<td>0.98929444</td>
<td>0.21465441</td>
<td>0.66763618</td>
</tr>
<tr>
<td>gen5</td>
<td>0.83170474</td>
<td>0.86364345</td>
<td>0.1785267</td>
<td>0.98886996</td>
</tr>
<tr>
<td>gen6</td>
<td>0.68540221</td>
<td>0.78312865</td>
<td>0.70104657</td>
<td>0.25904827</td>
</tr>
<tr>
<td>gen7</td>
<td>0.99732179</td>
<td>0.71879339</td>
<td>0.44494156</td>
<td>0.4203282</td>
</tr>
</tbody>
</table>
<p>临床信息（demoClinicalInfo.csv）如下：</p>
<table>
<thead>
<tr>
<th>Sample</th>
<th>Type</th>
<th>Age</th>
<th>Gender</th>
</tr>
</thead>
<tbody>
<tr>
<td>sample1</td>
<td>Case</td>
<td>18</td>
<td>F</td>
</tr>
<tr>
<td>sample2</td>
<td>Case</td>
<td>33</td>
<td>M</td>
</tr>
<tr>
<td>sample3</td>
<td>Case</td>
<td>24</td>
<td>F</td>
</tr>
<tr>
<td>sample4</td>
<td>Case</td>
<td>35</td>
<td>F</td>
</tr>
<tr>
<td>sample5</td>
<td>Case</td>
<td>56</td>
<td>F</td>
</tr>
<tr>
<td>sample6</td>
<td>Case</td>
<td>44</td>
<td>F</td>
</tr>
<tr>
<td>sample7</td>
<td>Case</td>
<td>39</td>
<td>F</td>
</tr>
<tr>
<td>sample8</td>
<td>Case</td>
<td>60</td>
<td>M</td>
</tr>
<tr>
<td>sample9</td>
<td>Control</td>
<td>42</td>
<td>M</td>
</tr>
<tr>
<td>sample10</td>
<td>Control</td>
<td>23</td>
<td>M</td>
</tr>
</tbody>
</table>
<p>我们正在使用<code>read.csv</code>即可读入这些数据</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表达矩阵</span></span><br><span class="line">exp_demo=as.matrix(read.csv(<span class="string">&#x27;demoExpression.csv&#x27;</span>,quote=<span class="string">&#x27;&#x27;</span>,row.names=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 临床信息</span></span><br><span class="line">info_demo=read.csv(<span class="string">&#x27;demoClinicalInfo.csv&#x27;</span>,quote=<span class="string">&#x27;&#x27;</span>,row.names=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 检查是否样本对应</span></span><br><span class="line">all(rownames(info_demo)==colnames(exp_demo))</span><br><span class="line"><span class="comment"># TRUE</span></span><br></pre></td></tr></table></figure>
<p>读入数据之后，其实非常容易就可以得到<code>ExpressionSet</code></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">first_expressionSet = ExpressionSet(assayData=exp_demo) <span class="comment"># 将exp_demo直接赋给assayData</span></span><br><span class="line">first_expressionSet</span><br></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExpressionSet (storageMode: lockedEnvironment)</span><br><span class="line">assayData: 34 features, 15 samples </span><br><span class="line">  element names: exprs </span><br><span class="line">protocolData: none</span><br><span class="line">phenoData: none</span><br><span class="line">featureData: none</span><br><span class="line">experimentData: use &#39;experimentData(object)&#39;</span><br><span class="line">Annotation:</span><br></pre></td></tr></table></figure>
<p>可以从中看出，该<code>ExpressionSet</code>数据中，只有<code>assayData</code>被赋予了值，而且能看出统计信息，例如<code>34 features</code>（有34个基因），<code>15 samples</code>（15个样本）。</p>
<p>在此我们就完成了最基本的，将基因表达谱装到<code>ExpressionSet</code>中，下面就轮到临床信息了，但在处理临床信息之前，需要说明一点，就是每当我们从别处获得临床信息，或者将要把临床信息传递出去的时候，是不是就像上表中的我一样，以这种表格。</p>
<table>
<thead>
<tr>
<th>Sample</th>
<th>Type</th>
<th>Age</th>
<th>Gender</th>
</tr>
</thead>
<tbody>
<tr>
<td>sample1</td>
<td>Case</td>
<td>18</td>
<td>F</td>
</tr>
</tbody>
</table>
<p>这种临床信息较为简单，几乎看到表头，我们就能知道里面的信息是什么（当然也有含糊的地方，这个<code>TYPE</code>中的case到底是什么，我能理解是处理组，但是什么处理能写出来吗？）</p>
<p>而将这样的临床信息补充完整，将对我们传递数据，或者许久以后我们再来处理这些数据回想信息将会有非常大的帮助。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该data frame中，必须要有labelDescription</span></span><br><span class="line">metadata &lt;- data.frame(labelDescription=c(<span class="string">&quot;patient type, case means liver cancer sample and control means while cells sample&quot;</span>,</span><br><span class="line">                                          <span class="string">&quot;age&quot;</span>,  </span><br><span class="line">                                          <span class="string">&quot;gender, F=Female M=Male&quot;</span>), </span><br><span class="line">                                          row.names=c(<span class="string">&quot;Type&quot;</span>, <span class="string">&quot;Age&quot;</span>, <span class="string">&quot;Gender&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>在此相当于给我们的临床信息的表头建立了一个meta数据，我们也会将其一块存入<code>ExpressionSet</code>，这样我们以后打开<code>ExpressionSet</code>，信息一目了然。</p>
<p>我们首先将临床信息和对应的meta信息放入一个新的<code>AnnotatedDataFrame</code></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">phenoData &lt;- new(<span class="string">&quot;AnnotatedDataFrame&quot;</span>, </span><br><span class="line">                 data=info_demo, varMetadata=metadata)</span><br><span class="line">phenoData</span><br></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">An object of class &#39;AnnotatedDataFrame&#39;</span><br><span class="line">  rowNames: sample1 sample2 ... sample15 (15 total)</span><br><span class="line">  varLabels: Type Age Gender</span><br><span class="line">  varMetadata: labelDescription</span><br></pre></td></tr></table></figure>
<p>有了这样的数据，我们就可以将临床信息和表达数据整理到一起了</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">exampleSet &lt;- ExpressionSet(assayData=exp_demo, </span><br><span class="line">                            phenoData=phenoData)</span><br><span class="line">exampleSet</span><br></pre></td></tr></table></figure>
<p>现在我们的<code>ExpressionSet</code>信息就更加丰富了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExpressionSet (storageMode: lockedEnvironment)</span><br><span class="line">assayData: 34 features, 15 samples </span><br><span class="line">  element names: exprs </span><br><span class="line">protocolData: none</span><br><span class="line">phenoData</span><br><span class="line">  sampleNames: sample1 sample2 ... sample15 (15 total)</span><br><span class="line">  varLabels: Type Age Gender</span><br><span class="line">  varMetadata: labelDescription</span><br><span class="line">featureData: none</span><br><span class="line">experimentData: use &#39;experimentData(object)&#39;</span><br><span class="line">Annotation: </span><br></pre></td></tr></table></figure>
<p>里面存了</p>
<ol>
<li>表达矩阵信息</li>
<li>临床信息及临床信息的描述信息</li>
</ol>
<p>如果我们想要一个文件代表所有，就可以尽可能的完善所有信息，因为后续的并不是每个都能用得上所以，我会快速过一遍。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我想加入一些该试验的描述信息，下面用到中文的地方只是为了表示这个位置可以写入信息，最好别用中文。</span></span><br><span class="line">experimentData &lt;- new(<span class="string">&quot;MIAME&quot;</span>, </span><br><span class="line">                      name=<span class="string">&quot;生信小白板&quot;</span>, </span><br><span class="line">                      lab=<span class="string">&quot;自由主义的实验室&quot;</span>, </span><br><span class="line">                      contact=<span class="string">&quot;bioinfo.board@xxxx.com&quot;</span>, </span><br><span class="line">                      title=<span class="string">&quot;Smoking-Cancer Experiment&quot;</span>, </span><br><span class="line">                      abstract=<span class="string">&quot;Biobase is part of the Bioconductor project, and is used by many other packages. Biobase contains standardized data structures to represent genomic data. The ExpressionSet class is designed to combine several diﬀerent sources of information into a single convenient structure. An ExpressionSet can be manipulated (e.g., subsetted, copied) conveniently, and is the input or output from many Bioconductor functions.&quot;</span>, </span><br><span class="line">                      url=<span class="string">&quot;www.lab.not.exist&quot;</span>, </span><br><span class="line">                      other=list( notes=<span class="string">&quot;Created from text files &quot;</span> ))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其加入ExpressionSet</span></span><br><span class="line">exampleSet &lt;- ExpressionSet(assayData=exp_demo, </span><br><span class="line">                            phenoData=phenoData, </span><br><span class="line">                            experimentData=experimentData, </span><br><span class="line">                            annotation=<span class="string">&quot;human&quot;</span>)</span><br><span class="line">exampleSet</span><br></pre></td></tr></table></figure>
<p>输入如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExpressionSet (storageMode: lockedEnvironment)</span><br><span class="line">assayData: 34 features, 15 samples </span><br><span class="line">  element names: exprs </span><br><span class="line">protocolData: none</span><br><span class="line">phenoData</span><br><span class="line">  sampleNames: sample1 sample2 ... sample15 (15 total)</span><br><span class="line">  varLabels: Type Age Gender</span><br><span class="line">  varMetadata: labelDescription</span><br><span class="line">featureData: none</span><br><span class="line">experimentData: use &#39;experimentData(object)&#39;</span><br><span class="line">Annotation: human </span><br></pre></td></tr></table></figure>
<p>可以看出如果想知道实验信息，使用<code>experimentData(object)</code></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">experimentData(exampleSet)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Experiment data</span><br><span class="line">  Experimenter name: &lt;U+751F&gt;&lt;U+4FE1&gt;&lt;U+5C0F&gt;&lt;U+767D&gt;&lt;U+677F&gt; </span><br><span class="line">  Laboratory: &lt;U+81EA&gt;&lt;U+7531&gt;&lt;U+4E3B&gt;&lt;U+4E49&gt;&lt;U+7684&gt;&lt;U+5B9E&gt;&lt;U+9A8C&gt;&lt;U+5BA4&gt; </span><br><span class="line">  Contact information: bioinfo.board@xxxx.com </span><br><span class="line">  Title: Smoking-Cancer Experiment </span><br><span class="line">  URL: www.lab.not.exist </span><br><span class="line">  PMIDs:  </span><br><span class="line"></span><br><span class="line">  Abstract: A 1 word abstract is available. Use &#39;abstract&#39; method.</span><br><span class="line">  notes:</span><br><span class="line">   notes:     </span><br><span class="line">      Created from text files </span><br></pre></td></tr></table></figure>
<p>所以其中的中文都会被如此处理，我们同样可以查看详细的摘要信息</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">cat(abstract(exampleSet))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Biobase is part of the Bioconductor project, and is used by many other packages. Biobase contains standardized data structures to represent genomic data. The ExpressionSet class is designed to combine several di&lt;U+FB00&gt;erent sources of information into a single convenient structure. An ExpressionSet can be manipulated (e.g., subsetted, copied) conveniently, and is the input or output from many Bioconductor functions.</p>
</blockquote>
<p>这样一个完整的数据集，拿到哪，我都能知道它包含什么样的数据，什么样的信息。所以我会将他保留下来，替代我并不完整的两个CSV文件</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">saveRDS(exampleSet, file = <span class="string">&quot;demo.rds&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>如果想要要读取也很简单</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">readRDS(<span class="string">&#x27;demo.rds&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>下面给大家看一点小信息，那就是用这种方法存储数据，所占内存更小。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-rw-rw-r-- 1 xxx xxx   322  Mar  1 16:04 demoClinicalInfo.csv</span><br><span class="line">-rw-rw-r-- 1 xxx xxx   6383 Mar  1 16:04 demoExpression.csv</span><br><span class="line">-rw-r--r-- 1 xxx xxx   5562 Mar  1 18:54 demo.rds</span><br></pre></td></tr></table></figure>
<h2 id="后话">后话</h2>
<p>为什么我会觉得了解到这个挺不错</p>
<ul>
<li>第一，很多的R包都支持这样一种格式，如果想要使用很多R包，了解他的输入那是必须的</li>
<li>第二，就是他真的让我觉得非常全面，可以将所有信息存放到一起，即便很长时间后，我也不会因为我自己的疏忽而不知道什么数据是干什么，只要我在最开始生成这个文件的时候耐心一点。</li>
<li>第三，该数据结构同样可以进行数据切片和筛选，和一般的<code>data.frame</code>操作无异。</li>
</ul>
<p>如果想了解完整例子，可以看<a href="https://github.com/btrspg/examples-in-bb/blob/master/ExpressionSet/example.ipynb">https://github.com/btrspg/examples-in-bb/blob/master/ExpressionSet/example.ipynb</a></p>
]]></content>
      <categories>
        <category>中文</category>
      </categories>
      <tags>
        <tag>bioinformatics</tag>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>Grokking-Algorithms</title>
    <url>/2020/02/04/Grokking-Algorithms/</url>
    <content><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gbkqius3a0j31j90u0dtj.jpg" alt="算法图解"></p>
<p>《算法图解》是通过别人推荐的非常入门的算法书籍，对于比较熟悉算法的可能觉得比较浪费时间，而对于我这种，想要入门的那真是很不错的。里面有一些老知识，也能够获得一些新的知识，我想主要目的，还是让人觉得算法可以从简单的开始，并不是完全不明白的。</p>
<p>其中我印象最深的要数hash了，这个从perl的<code>my %hash;</code>一直用到python的<code>mydict=dict()</code>却一直理解错了他的意思。</p>
<p>原来他是通过hash函数，将一个<code>key</code>值进行转化成<code>index</code>，然后在hash表中使用该<code>index</code>进行存储<code>value</code>，这样他就能够很快的插入及存储数据了，这也就是为什么hash的存储及访问都非常的快的原因。第一次明白的时候不得不佩服，这个想法真的非常厉害。</p>
]]></content>
      <categories>
        <category>中文</category>
      </categories>
      <tags>
        <tag>bioinformatics</tag>
        <tag>算法图解</tag>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>Conda打造‘完美’分析环境</title>
    <url>/2019/09/13/conda-build-perfect-environment/</url>
    <content><![CDATA[<p><code>Conda</code> 能用来干什么相信大家已经非常清楚了，几乎所有使用<code>python</code>的小伙伴都会或多或少的使用到<code>conda</code>来帮助做不同版本环境的控制。</p>
<p>有时甚至会将整个分析环境都打包到一个<code>conda</code>环境中，所以用<code>Conda</code>打造‘完美’分析环境似乎没有什么新意。</p>
<p>但是我这里说到的‘完美’是利用<code>Conda</code>还要加上<code>jupyter lab</code>来共同打造。</p>
<blockquote>
<p>在自己的电脑上使用jupyter lab和conda有什么好说的</p>
</blockquote>
<p>那我就先放一张图，看看是否有些吸引力</p>
<p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g6y13q3wnzj31gr0u0jtx.jpg" alt="Snip20190913_21"></p>
<a id="more"></a>
<p>熟悉的<code>jupyter lab</code>界面，不过似乎有一些不太一样，不仅仅有<code>python</code>，还有<code>R</code>，还有新兴的数据分析黑马<code>julia</code>。</p>
<h2 id="以往jupyter-lab">以往jupyter lab</h2>
<p>以往<code>jupyter lab</code> 安装在自己笔记本或者台式上时，总觉得有些性能吃紧，想要试试分析大点的数据就吃不消，所以有条件当然是放到<code>SERVER</code>上，然后本地访问，这样既能保证操作方便，计算还得心应手。</p>
<p>顺便说一下自己的情况，因为是刚开始操作，所以准备将<code>jupyter lab</code>配置在登陆节点（60G内存，只是用来做登陆管理节点太浪费了），计算节点还是老老实实的做计算。</p>
<p>为了不让整个过程过于枯燥，先将结果放上来，展示一下。</p>
<h2 id="配置后结果">配置后结果</h2>
<h3 id="服务器端启动">服务器端启动</h3>
<p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g6y1bfxc56j32uu0quwp2.jpg" alt="Snip20190913_20"></p>
<h3 id="客户端使用情况">客户端使用情况</h3>
<p><strong>说明：所有涉及到code的部分，均来自于网上教程，文末给出链接</strong></p>
<h4 id="用python画画图">用python画画图</h4>
<p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g6y1cadjiij31c30u0wjx.jpg" alt="Snip20190913_26"></p>
<h4 id="用julia画个图">用Julia画个图</h4>
<p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g6y1drsrq9j31c30u0tg7.jpg" alt="Snip20190913_25"></p>
<h4 id="用r画个图">用R画个图</h4>
<p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g6y1e4wjroj31c30u0wtp.jpg" alt="Snip20190913_24"></p>
<h4 id="环境下安装软件">环境下安装软件</h4>
<p>因为是基于conda的环境，所以想装任何软件，简单方便</p>
<p><strong>说明：使用‘!’来执行shell命令只能在python的环境下使用，julia和R kernel均不支持。</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g6y1f6dnf6j31c30u0na8.jpg" alt="Snip20190913_23"></p>
<p>用这个界面来画个图，做做小分析，做个测试，是不是开心愉快。下面详细说说整个配置过程。</p>
<h2 id="配置">配置</h2>
<ol>
<li>安装conda，<a href="https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html">教程</a></li>
<li>生成一个新的conda环境，<code>conda create -n &lt;name&gt; python=3.5</code></li>
<li>激活conda环境，<code>conda activate &lt;name&gt;</code></li>
<li>安装所有必须的软件及包，<code>conda install -y  -c conda-forge  jupyterlab julia r-irkernel</code></li>
<li>生成<code>jupyter</code>配置文件，<code>jupyter notebook --generate-config</code></li>
<li>安装<code>IJulia</code>,<code>julia&gt;;Pkg;add IJulia;build IJulia</code></li>
<li>根据自己配置需求修改<code>jupyter</code>配置文件，详细给参照<a href="https://jupyter-notebook.readthedocs.io/en/stable/config.html">说明</a></li>
<li>修改完成后，启动即可，<code>jupyter lab --ip 0.0.0.0</code></li>
</ol>
<p>整个过程不算麻烦，就是内地的网络有的时候在配置时会有些影响，如果这样还是认为麻烦，那我就只能拿出我的杀手锏了。</p>
<p>有一个已经写好的docker image，在服务器上pull下来，即可直接使用。</p>
<h2 id="docker-image">Docker image</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --rm -it -p 8888:9000 \</span><br><span class="line">    -v `<span class="built_in">pwd</span>`:/lab/works btrspg/jupyterlab:1.0.0 \</span><br><span class="line">    bash -c <span class="string">&#x27;jupyter lab --ip 0.0.0.0 --allow-root&#x27;</span></span><br></pre></td></tr></table></figure>
<p>其中的<code>pwd</code>修改成项目所在目录即可，这样在自己的电脑上，只用输入<code>服务器ip:8888</code>即可。</p>
<p>自己的项目所有文件均会在<code>jupyter lab</code>的<code>works</code>目录下</p>
<h2 id="想要安装新的包？想有自己的image？">想要安装新的包？想有自己的image？</h2>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> btrspg/jupyterlab</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> conda install -r anaconda bioconductor-deseq2</span></span><br></pre></td></tr></table></figure>
<p>然后build一个新的image即可。</p>
<p>最后希望大家玩得开心，中秋快乐！</p>
<p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g6y1wsdd8zj31gr0u0gv3.jpg" alt="Snip20190913_21"></p>
]]></content>
      <categories>
        <category>中文</category>
      </categories>
      <tags>
        <tag>bioinformatics</tag>
        <tag>anaconda</tag>
        <tag>jupyter notebook</tag>
      </tags>
  </entry>
</search>
